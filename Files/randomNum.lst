     1                                  ; Name: Nicholas Schaffer
     2                                  ; User ID: nschaff1
     3                                  ; Email: nschaff1@umbc.edu
     4                                  ; Date: 12/9/2020
     5                                  ; Description: generates a random number in range 1 to 16 with the result being placed in rax
     6                                  
     7                                  	section .data
     8 00000000 1000000000000000        rmax:	dq	16
     9 00000008 0000000000000000        rseed:	dq	0
    10                                  	
    11                                  	section .text
    12                                  	global randomNum
    13                                  
    14                                  randomNum:
    15                                  	;; seed random with systime, returns time in rax
    16 00000000 B8C9000000              	mov 	rax, 201
    17 00000005 4831FF                  	xor	rdi, rdi
    18 00000008 0F05                    	syscall
    19                                  
    20 0000000A 48890425[08000000]      	mov	[rseed], rax
    21 00000012 4831C0                  	xor	rax, rax
    22                                  	
    23                                  	;; generate random number
    24 00000015 4831D2                  	xor     rdx, rdx ;the output of mul and div is in rax, so we will use rax to compute our random number
    25 00000018 4831C0                  	xor     rax, rax
    26 0000001B 4D31DB                  	xor     r11, r11
    27 0000001E 4D31D2                  	xor     r10, r10
    28 00000021 4D31C9                  	xor     r9, r9
    29 00000024 4D31C0                  	xor     r8, r8
    30                                  
    31 00000027 488B0425[08000000]      	mov     rax, [rseed]
    32 0000002F 41BB6D4EC641            	mov     r11, 1103515245
    33 00000035 41BA39300000            	mov     r10, 12345
    34                                  	
    35 0000003B 49F7E3                  	mul     r11
    36 0000003E 4C01D0                  	add     rax, r10
    37                                  
    38 00000041 880425[08000000]        	mov     [rseed], al
    39                                  
    40 00000048 41B900000100            	mov     r9, 65536
    41 0000004E 49F7F1                  	div     r9
    42                                  
    43 00000051 4C8B0425[00000000]      	mov     r8, [rmax]
    44 00000059 4983C001                	add     r8, 1
    45                                  
    46 0000005D 4831D2                  	xor     rdx, rdx ;modulus operation, clear the remainder in rdx from earlier and use newremainder as result
    47 00000060 49F7F0                  	div     r8
    48                                  
    49 00000063 4889D1                  	mov     rcx, rdx ;take the absolute value of the final answer
    50 00000066 48C1E91F                	shr     rcx, 31
    51 0000006A 4831CA                  	xor     rdx, rcx
    52 0000006D 4829CA                  	sub     rdx, rcx
    53 00000070 4889D0                  	mov     rax, rdx
    54                                  
    55 00000073 4831D2                  	xor     rdx, rdx ;set random values to be in correct range
    56 00000076 4831C9                  	xor     rcx, rcx
    57 00000079 B910000000              	mov     rcx, 16 - 1 + 1
    58 0000007E 48F7F1                  	div     rcx
    59 00000081 4889D0                  	mov     rax, rdx
    60 00000084 4883C001                	add     rax, 1
    61                                  
    62 00000088 C3                      	ret
    63                                  
    64                                  	
